cluster:
  name: custom-config-test
destinations:
  - name: metricsService
    type: prometheus
    url: https://prometheus.example.com/api/prom/push
    extraLabels:
      region: southwest
      tenant: widgetco
    extraLabelsFrom:
      env: remote.kubernetes.configmap.cluster_info.data["env"]
      region: remote.kubernetes.configmap.cluster_info.data["region"]
    auth:
      type: basic
      username: 12345
      password: It's a secret to everyone
  - name: logsService
    type: loki
    url: https://loki.example.com/loki/api/v1/push
    auth:
      type: basic
      username: 12345
      password: It's a secret to everyone
  - name: profilesService
    type: pyroscope
    url: https://pyroscope.example.com
    auth:
      type: basic
      username: 12345
      password: It's a secret to everyone
clusterMetrics:
  enabled: true
alloy-metrics:
  enabled: true
  extraConfig: |-
    discovery.relabel "animal_service" {
      targets = discovery.kubernetes.services.targets
      rule {
        source_labels = ["__meta_kubernetes_service_label_app"]
        regex = "animal-service"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_name"]
        regex = "animal-service-metrics"
        action = "keep"
      }
    }

    prometheus.scrape "animal_service" {
      job_name   = "animal_service"
      targets    = discovery.relabel.animal_service.output
      forward_to = [prometheus.relabel.metrics_service.receiver]
    }

    remote.kubernetes.configmap "cluster_info" {
      name = "cluster_info"
      namespace = {{ .Release.Namespace | quote }}
    }
clusterEvents:
  enabled: true
alloy-singleton:
  enabled: true
podLogs:
  enabled: true
alloy-logs:
  enabled: true
  extraConfig: |-
    discovery.relabel "postgres_logs" {
      targets = discovery.relabel.pod_logs.output

      rule {
        source_labels = ["namespace"]
        regex = "postgres"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app"]
        regex = "database"
        action = "keep"
      }
    }

    local.file_match "postgres_logs" {
      path_targets = discovery.relabel.postgres_logs.output
    }

    loki.source.file "postgres_logs" {
      targets    = local.file_match.postgres_logs.targets
      forward_to = [loki.process.postgres_logs.receiver]
    }

    loki.process "postgres_logs" {
      stage.cri {}
      stage.static_labels {
        values = {
          job = "integrations/postgres_exporter",
          instance = "animaldb",
          helm_release = {{ .Release.Name | quote }},
        }
      }
      forward_to = [loki.process.logs_service.receiver]
    }

    remote.kubernetes.configmap "cluster_info" {
      name = "cluster_info"
      namespace = {{ .Release.Namespace | quote }}
    }
annotationAutodiscovery:
  enabled: true
prometheusOperatorObjects:
  enabled: true
  crds:
    deploy: true
integrations:
  alloy:
    instances:
      - name: alloy
        labelSelectors:
          app.kubernetes.io/name:
            - alloy-metrics
            - alloy-singleton
            - alloy-logs
        metrics:
          tuning:
            useDefaultAllowList: false
            includeMetrics:
              - alloy_build_info
alloy-profiles:
  extraConfig: |-
    remote.kubernetes.configmap "cluster_info" {
      name = "cluster_info"
      namespace = {{ .Release.Namespace | quote }}
    }

